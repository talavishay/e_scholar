<?php
function e_scholar_module_admin() {
	$form = array();
	$form['library'] = array(
			'#type' => 'fieldset',
			'#title' => "מאגר",
			'#weight' => 0,
// 			'#collapsible' => TRUE,
// 			'#collapsed' => FALSE,
	);
	$form['library']['e_scholar_module_library_hover'] = array(
			'#type' => 'textfield',
			'#title' => 'הסבר לסמל המאגר',
			'#default_value' => variable_get('libraries_tooltip'),
			// 			'#size' => 2,
	// 			'#maxlength' => 2,
			'#description' => 'טקסט למעבר עכבר על סמל ה"מאגר" ',
			'#required' => TRUE,
	);
	$form['library']['e_scholar_module_library_link'] = array(
			'#type' => 'textfield',
			'#title' => 'קישור לסמל המאגר',
			'#default_value' => variable_get('libraries_link'),
			// 			'#size' => 2,
			// 			'#maxlength' => 2,
			'#description' => 'הדף אליו יעבור המשתמש בעת לחיצה על סמל המאגר',
			'#required' => TRUE,
	);
	$form['#attached']['css'] = array(
			drupal_get_path('module', 'e_scholar_module') . '/css/form.css',
	);
	$form['#submit'] = array('e_scholar_module_admin_submit');
	return system_settings_form($form);
}
function e_scholar_module_admin_validate($form, &$form_state) {
	
	if ($form_state['values']['e_scholar_module_library_hover'] === "") {
		form_set_error('e_scholar_module_library_hover', 'הסבר לסמל המאגר');
	}
	if ($form_state['values']['e_scholar_module_library_link'] === "") {
		form_set_error('e_scholar_module_library_link', 'קישור לסמל המאגר');
	}

}
		 
function e_scholar_module_admin_submit($form, &$form_state) {
	variable_set('libraries_tooltip', $form_state['values']['e_scholar_module_library_hover']);
	variable_set('libraries_link', $form_state['values']['e_scholar_module_library_link']);
	
}
function e_scholar_module_init() {
    if($_GET["q"] !== "search" && $_GET["q"] !== "views/ajax" && $_GET["q"] !== "buy_url" && $_GET["q"] !== "buy_export" && $_GET["q"] !== "system/ajax"){
            drupal_add_css('sites/all/themes/omega/omega/css/omega-visuals.css');        
    } 
     if (user_is_logged_in()) {
        global $user;
        $settings['username'] = $user->name == "" ? $user->email : $user->name;
        $settings['uid'] = $user->uid;
        $e_scholar_settings['products'] = _get_product_flags();
    };
    $e_scholar_settings['bookmarks'] =  _get_bookmark_flags();
    $server = search_api_server_load(1);
    $server_url = 'http://'.$server->options["host"].':'.$server->options["port"].$server->options["path"];

    $settings = array('arg' => arg(),"solr_server" =>   $server_url );
//    drupal_add_js($e_scholar_settings, 'e_scholar'); 
    drupal_add_js($e_scholar_settings, 'setting'); 
    drupal_add_js($settings, 'setting'); 
}

// node form : biblio->keywords vonvert ";" to "," 
function e_scholar_module_node_presave($node){
    if($node->type === "biblio"){
        $node->biblio_url =  trim($node->biblio_url);
        if(isset($node->biblio_custom7)){
            if($node->biblio_custom7 === "" ){
                $node->biblio_custom7 = null;
            } elseif( $node->biblio_custom7 === "broken" && $node->status === 1 ){
                $node->biblio_custom7 = date('c');
            }
        }
        // remove duplicate urls
        if(preg_match('/internal-pdf/i',  $node->biblio_url) !== 0){
            $node->biblio_url = preg_replace('/^internal-pdf:\/\/(.*)https?:\/\/(.*)/i',"http://$2",  $node->biblio_url);
        } else {
            $node->biblio_url = preg_replace('/^https?:\/\/(.*)http:\/\/(.*)/i',"http://$1",  $node->biblio_url);
        }
        // suport ";" for the keywords field
        if(count($node->biblio_keywords) === 1 && isset($node->biblio_keywords[0])){
        if( gettype($node->biblio_keywords[0]) === "string"){
            if(preg_match('/;/i', $node->biblio_keywords[0])){;
            $keywords = explode(';', $node->biblio_keywords[0]);
            } elseif (preg_match('/,/i', $node->biblio_keywords[0])) {
            $keywords = explode(',', $node->biblio_keywords[0]);
            }
            if(isset($keywords)){
                if(gettype($keywords) === "array"){
                    foreach($keywords as $k => $v){
                        $keywords[$k] = trim($v);
                    }
                    $node->biblio_keywords = $keywords;
                }
            }
        }
    }
    return $node;
    }
}
// commerce currency symbol
//function e_scholar_module_flag($page){
//     if (user_is_logged_in()) {
//        global $user;
//        $settings['username'] = $user->name == "" ? $user->email : $user->name;
//        $settings['uid'] = $user->uid;
//        $e_scholar_settings['products'] = _get_product_flags();
//    };
//    $e_scholar_settings['bookmarks'] =  _get_bookmark_flags();
//    $settings = array('arg' => arg());
////    drupal_add_js($e_scholar_settings, 'e_scholar'); 
//    drupal_add_js($e_scholar_settings, 'setting'); 
//    drupal_add_js($settings, 'setting'); 
//}
function e_scholar_module_commerce_currency_info_alter(&$currencies, $langcode) {
//    $currencies['ILS']['symbol'] = 'ש"ח';
//    $currencies['ILS']['symbol_placement'] = 'before';
//    $currencies['ILS']['code_placement'] = 'after';
//    $currencies['ILS']['code'] = 'שח';
}
// user profile edit : hiding stuff..
function e_scholar_module_form_user_profile_form_alter(&$form, &$form_state){
    unset($form["locale"], $form["contact"], $form["biblio_fieldset"]);
}
// Checkout confirmation: Custom checkout pane.
function e_scholar_module_base_checkout_form($form, &$form_state, $checkout_pane, $order) {
    $data = '';
    $data .= $order->mail;
    $user = user_load_by_name($order->mail);
    $data .= '<h2>'.t('your purchesed itmes').'</h2><ul>';
    foreach ($order->commerce_line_items['und'] as $v => $k) {
        $line_item = commerce_line_item_load(intval($k['line_item_id']));
        if($line_item->line_item_label === "url"){
            $label = t('article pass');
        } else {
            $label = t('citation pass');
        }
        $data .= '<li><div class="label">'.$label. ':</div>';
        $data .= $line_item->field_laxo_name['und'][0]['safe_value'] . '</li>';

    }
    $data .= '</ul>';
    if (user_is_anonymous()) {
        $timestamp = REQUEST_TIME;
        $token = drupal_hash_base64(drupal_random_bytes(55));
        $_SESSION['pass_reset_' . $user->uid] = $token;
        $link = 'user/' . $user->uid . '/edit?pass-reset-token=' . $token;
        $linkTxt = "login_one_time/" . $user->uid . "/" . $timestamp . "/" . user_pass_rehash($user->pass, $timestamp, $user->login);
        $link = url($linkTxt, array(
            'query' => array('destination' => $link),
            'absolute' => TRUE,
        ));

        $data .= '<a href="' . $link . '">'.t('you can now login').'</a>';
    }
    $checkout_form['my_module_pane_field_display'] = array(
        '#markup' => $data,
    );
    return $checkout_form;
}

function e_scholar_module_commerce_checkout_pane_info_alter(&$panes) {
    if (!empty($panes['e_scholar_module_base'])) {
        // Change the title of the "Cart Contents" pane.
        $panes['e_scholar_module_base']['title'] = t('order completed');
    }
}

function e_scholar_module_commerce_checkout_pane_info() {
    $panes['e_scholar_module_base'] = array(
        'title' => t('laxo checkout complete info '),
        'base' => 'e_scholar_module_base',
        // The checkout page where this should be displayed by default.
        'page' => 'complete',
        'weight' => -5,
            // The form functions could be found in another file...
            // 'file' => 'includes/pane.inc',
    );

    return $panes;
}

function e_scholar_module_commerce_order_presave($order) {
    /* Parameters:
     * 	$order: The order that just completed checkout.
     * logic:
     * 	assign flag per purchsed per node per user item  */
    //TODO: remove this anon check? this is the commerce_checkout_complete after all ???
    if($order->status == "completed" && $order->uid != "0") {
        foreach ($order->commerce_line_items['und'] as $k => $v) {
            $line_item = commerce_line_item_load(intval($v['line_item_id']));
            if ($line_item->line_item_label == 'url') {
                flag('flag', 'biblio_url', intval($line_item->field_nid['und'][0]['value']), user_load($order->uid));
            }
            if ($line_item->line_item_label == 'export') {
                flag('flag', 'export', intval($line_item->field_nid['und'][0]['value']), user_load($order->uid));
            }
        }
    } 
}

function e_scholar_module_views_pre_render(&$view) {
    //~ dpm($view->name);
    /* the view "free_laxo_biblio_data_output" returns commerce=null nodes...* */
    if (isset($view) && arg(0) != 'admin') {

        if ($view->name === 'search_api_solr' || $view->name === 'commerce_cart_form' ){
            // adding a total pages amount to our pagers
            global $pager_total;
            // adding the product price to the buy link..
            $product = commerce_product_load(1);    
            $price = entity_metadata_wrapper('commerce_product', $product)->commerce_price->value();    
            $url_price_display = commerce_currency_format(round($price['amount']), $price['currency_code'], $product);
            $product = commerce_product_load(2);    
            $price = entity_metadata_wrapper('commerce_product', $product)->commerce_price->value();    
            $citation_price_display = commerce_currency_format(round($price['amount']), $price['currency_code'], $product);
            drupal_add_js(array('pager_total' => $pager_total[0], "url_price" => $url_price_display, "citaion_price" => $citation_price_display, "libraries_tooltip" => variable_get("libraries_tooltip"),"libraries_link" => variable_get("libraries_link")), 'setting');
            
        }
        
        if ($view->name === 'search_api_solr' || $view->name === "commerce_cart_form" ){
            
            drupal_add_library('system', 'drupal.ajax');            
//            drupal_add_js('//cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.3.1/jquery.cookie.min.js');
            drupal_add_js('misc/jquery.cookie.js');
            drupal_add_js(drupal_get_path("module", "e_scholar_module") . '/js/search.js');
            drupal_add_css(drupal_get_path("module", "e_scholar_module") . '/css/search.css');
            // CHROME BACK btn ISSUE
//            drupal_add_http_header('Cache-Control', 'no-cache, no-store, must-revalidate', TRUE);
//            drupal_add_http_header('Pragma', 'no-cache', TRUE); // HTTP 1.0.
//            drupal_add_http_header('Expires', '0', TRUE); // Proxies.
                    
            }
        //~ Handler for free articles 
        
        if ($view->name == 'free_laxo_biblio_data_output_') {
            if (count($view->result) >= 1) {
                if ($view->result[0]->biblio_biblio_url == "" || !isset($view->result[0]->biblio_biblio_url)) {
                    drupal_set_message(t("Sorry the url for this biblio seems to be empty.."));
                    drupal_goto($_SERVER['HTTP_REFERER']);
                } else {
                    drupal_goto($view->result[0]->biblio_biblio_url);
                }
            }
            if (count($view->result) == 0) {
                // 0 result = no article of this nid / tring to access a paid article with a free "url"
                //TODO: add a "buy now link" ??
                drupal_set_message(t("access to the article was denied..  this article requirs an access premission you dont have.. "));
                drupal_goto($_SERVER['HTTP_REFERER']);
            }
        }
        if ($view->name == 'orders_stats' ) {
            drupal_add_js(drupal_get_path("module", "e_scholar_module") . '/js/orders_state.js');
            drupal_add_css(drupal_get_path("module", "e_scholar_module") . '/css/tables.css');
        }
        if ($view->name == 'commerce_user_orders' ) {
			drupal_add_js( array("libraries_tooltip" => variable_get("libraries_tooltip"),"libraries_link" => variable_get("libraries_link")), 'setting');
// 			drupal_add_js("//cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.min.js", array("footer"));
        }
    }
     
}

function _get_bookmark_flags(){
    $bookmark_nodes = array();
    $views_get_view_result_flag_bookmarks_block_2 = views_get_view_result('flag_bookmarks', 'block_2');
     if (count($views_get_view_result_flag_bookmarks_block_2) > 0) {
        foreach ($views_get_view_result_flag_bookmarks_block_2 as $key => $val) {
                $bookmark_nodes[] =   $val->nid;
        }
    }
    return $bookmark_nodes;
}
function _get_product_flags(){
    
    global $user;
    $biblio_biblio_export_nodes = array();
    $biblio_biblio_url_nodes = array();
//    $biblio_biblio_url_nodes = ;//    $biblio_biblio_export_nodes = array();
    // retrive current user purchesed url_access data to make
    $views_get_view_result_flag_bookmarks_embed_1 = views_get_view_result('flag_bookmarks', 'embed_1');
    if (count($views_get_view_result_flag_bookmarks_embed_1) > 0) {
        foreach ($views_get_view_result_flag_bookmarks_embed_1 as $key => $val) {
            $biblio_biblio_url_nodes[] = ($val->biblio_biblio_url != "" || isset($val->biblio_biblio_url)) ? array("nid" => $val->nid, "url" => $val->biblio_biblio_url) : array("nid" => $val->nid, "url" => "/empty_url");
        }
    }
    $views_get_view_result_flag_bookmarks_embed_2 = views_get_view_result('flag_bookmarks', 'embed_2');
    if (count($views_get_view_result_flag_bookmarks_embed_2) > 0) {
        foreach ($views_get_view_result_flag_bookmarks_embed_2 as $key => $val) {
            $biblio_biblio_export_nodes[] = array("nid" => $val->nid);
        }
    }
    return array(
            "biblio_biblio_url_nodes" => $biblio_biblio_url_nodes,
            "biblio_biblio_export_nodes" => $biblio_biblio_export_nodes);
             
}
function e_scholar_module_preprocess_views_view_fields(&$vars) {
    /*  laxo search bookmarks
     * replaces the nid field from the "search_api_solr_view" view with a "bookmark" flag for that node..
     */
    if ($vars["view"]->name == "search_api_solr" && isset($vars["fields"]["nothing_2"])) {
        if (!user_is_anonymous()) {
            $bookmark = flag_create_link('bookmarks', intval(preg_replace('/<span(.*)>(.*)<\/span>/', '$2', $vars["row"]->entity  )));
            $vars["fields"]["nothing_2"]->content = '<input title="' . t('add/remove bookmark') . '" type="checkbox" />' . $bookmark ;
        }
//        $vars["fields"]["nothing_2"]->class = 'view-field-bookmark';
        $vars["fields"]["nothing_2"]->wrapper_prefix = '<div class="view-field-bookmark">';
        $vars["fields"]["nothing_2"]->wrapper_suffix = '</div>';
    }    
    if ($vars["view"]->name == "laxo_biblio_data_output" && $vars["view"]->current_display != "page_1" && $vars["view"]->current_display != "page_2") {
        if (arg(0) == "citation") {
            // TODO: redundent ???
            $nid = $vars["view"]->query->where[0]['conditions'][0]['value'][':node_nid'];
            drupal_add_js(array("citation" => array("styles" => array("apa", "chi", "ama", "ieee"), "output" => "na", "nid" => $nid)), 'setting');
        }
    }
}

/**
 * Implements hook_search_api_ajax_modules_alter().
 *
 * Add custom modules to search api ajax blocks.
 */
function e_scholar_module_search_api_ajax_modules_alter(&$modules) {
    $modules[] = 'facetapi';
    $modules[] = 'flag';
    $modules[] = 'views_flag_refresh';
}

/**
 * Implements hook_search_api_ajax_settings().
 */
function e_scholar_module_search_api_ajax_settings() {
    $settings = array(
        // required: CSS ID for the main content (search results html)
        'content' => '#main #content .content',
        // required: array of regions with search-related blocks => CSS ID's
        'regions' => array(
            'header' => '#header',
            'above_content' => '#above_content',
            'sidebar_first' => '#sidebar-first',
            'sidebar_second' => '#sidebar-second',
        ),
        // optional: if you want to show a spinner image on AJAX
        'spinner' => drupal_get_path('module', 'search_api_ajax') . '/spinner.gif',
        // optional: if you want to scroll-back-to-top on paging search results
        'scrolltarget' => '#main-content',
        'scrollspeed' => 1000,
        // optional: fade main content on AJAX (fade=1 for true)
        'fade' => 1,
        'opacity' => 0.3,
    );

    return $settings;
}

function e_scholar_module_entity_property_info_alter(&$info) {
    /* 	adding fields to be indexd by search_api@solr  */
    $info['node']['properties']['biblio_custom1'] = array(
        'type' => 'text',
        'label' => t('laxo title'),
        'sanitized' => TRUE,
        'getter callback' => 'e_scholar_module_biblio_custom1_getter_callback',
    );
    $info['node']['properties']['biblio_keywords'] = array(
        'type' => 'list<text>',
        'label' => t('biblio keywords'),
        'sanitized' => TRUE,
        'getter callback' => 'e_scholar_module_keywords_getter_callback',
    );
    $info['node']['properties']['biblio_contributors'] = array(
        'type' => 'list<text>',
        'label' => t('biblio contributors'),
        'sanitized' => TRUE,
        'getter callback' => 'e_scholar_module_contributors_getter_callback',
    );
    $info['node']['properties']['biblio_year'] = array(
        'label' => t('biblio year'),
        'sanitized' => TRUE,
        'getter callback' => 'e_scholar_module_year_getter_callback',
    );
    $info['node']['properties']['biblio_type'] = array(
        'label' => t('biblio type'),
        'sanitized' => TRUE,
        'getter callback' => 'e_scholar_module_type_getter_callback',
    );
    $info['node']['properties']['biblio_secondary_title'] = array(
        'label' => t('biblio secondary title'),
        'sanitized' => TRUE,
        'getter callback' => 'e_scholar_module_secondary_title_getter_callback',
    );
    $info['node']['properties']['biblio_abstract '] = array(
        'label' => t('biblio abstract'),
        'sanitized' => TRUE,
        'getter callback' => 'laxo_biblio_abstract_getter_callback',
    );
    $info['node']['properties']['biblio_url'] = array(
        'label' => t('biblio url'),
        'sanitized' => TRUE,
        'getter callback' => 'e_scholar_module_url_getter_callback',
    );
}

//e_scholar_module_entity_property_info_alter--Getter callbacks # START
function e_scholar_module_biblio_custom1_getter_callback($item) {
    return $item->biblio_custom1;
}

function e_scholar_module_contributors_getter_callback($item) {/** * Getter callbacks for multiple field. */
    $contributors = array();
    foreach ($item->biblio_contributors as $k => $v) {
        $contributors[] = $item->biblio_contributors[$k]["name"];
    }
    return $contributors;
}

function e_scholar_module_keywords_getter_callback($item) {
    return $item->biblio_keywords;
}

function e_scholar_module_year_getter_callback($item) {
    return $item->biblio_year;
}

function e_scholar_module_type_getter_callback($item) {
    return $item->biblio_type_name;
}

function e_scholar_module_secondary_title_getter_callback($item) {
    return $item->biblio_secondary_title;
}

function laxo_biblio_abstract_getter_callback($item) {

    return $item->biblio_abst_e;
}

function e_scholar_module_url_getter_callback($item) {
    return $item->biblio_url;
}
/** * biblio@solr Getter callbacks ## END */

//~ ##########################/* ajax loader - ## START ## *
function e_scholar_module_menu_alter(&$items){
  $items['user/%user/view']['access callback'] = FALSE;
}

function e_scholar_module_menu() {
	
    $items['buy_url'] = array(
        'page callback' => 'ajax_buy_response',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'delivery callback' => 'ajax_deliver',
    );
    $items['buy_export'] = array(
        'page callback' => 'ajax_buy_response',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'delivery callback' => 'ajax_deliver',
    );
    $items['get_export'] = array(
        'page callback' => 'ajax_get_export',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
            //~ 'delivery callback' => 	'ajax_deliver',
    );
    $items['get_checkout'] = array(
        'page callback' => 'ajax_get_checkout',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'delivery callback' => 'ajax_deliver',
    );
    $items['get_cart_block'] = array(
        'page callback' => 'ajax_get_cart_block',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
//        'delivery callback' => 'ajax_deliver',y
    );
    $items['get_cart'] = array(
        'page callback' => 'ajax_get_cart',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
//        'delivery callback' => 'ajax_deliver',
    );
    
    $items['admin/scholare-settings'] = array(
    		'title' => 'הגדרות\הודעות',
    		'description' => 'שליטה על הגדרות והודעות יחודיות למערכת סקולרי',
    		'page callback' => 'drupal_get_form',
    		'page arguments' => array('e_scholar_module_admin'),
    		'access arguments' => array('access administration pages'),
    		'type' => MENU_NORMAL_ITEM,
    );
    
    return $items;
}
function e_scholar_module_get_line_items(){
    $lineItames = array();
	$order = commerce_cart_order_load($GLOBALS['user']->uid);
    foreach($order->commerce_line_items["und"]  as $k => $v ){
    	$lineItames[] = $v["line_item_id"];
    }
    return $lineItames;
}
function e_scholar_module_find_duplicates($lineItames ,$productName, $nid){
	$dup = false;
	$line_items = commerce_line_item_load_multiple($lineItames, array("line_item_label" => preg_replace("/buy_(.*)/i", "$1", $productName)) );
	 foreach($line_items  as $k => $v ){
	 	if(empty($v->field_nid)){
	 		commerce_line_item_delete($v->line_item_id);
	 	}
 		if($v->field_nid["und"][0]["value"] == $nid ){
 			$dup = true;
        
 		}
	 }
	 return $dup;
}
function e_scholar_module_broken_line_items($lineItames ){
	$line_items = commerce_line_item_load_multiple($lineItames);
	 foreach($line_items  as $k => $v ){	 	
	 	if(empty($v->field_nid)){
	 		commerce_line_item_delete($v->line_item_id);
	 	} 		
	 }	 
}
function ajax_buy_response() {
	
    global $user;
    $nid = trim(strip_tags($_POST["nid"]));
    if(gettype(intval($nid)) != "integer" || gettype(intval($nid)) != "integer" || gettype($nid) == "undefined"){
    	// no nid , no point in adding to cart ... 
    	die();
    	exit();
    }
    $productName = trim(strip_tags($_POST["productName"]));
    $node = node_load($nid);
	$dup = false;
    $lineItames = e_scholar_module_get_line_items();
    if(!empty($lineItames)){
		$dup = e_scholar_module_find_duplicates($lineItames, $productName, $nid ); 
    }
	if(!$dup){
	    if (intval($nid) != 0 && gettype(intval($nid)) == "integer") {
	        if ($productName == 'buy_url') {
	            $line_item = commerce_cart_product_add_by_id(1, 1, $combine = FALSE, $user->uid);
	            $text = t('המוצר גישה לקישור המאמר "@biblio_custom1" נוסף לעגלה..', array('@biblio_custom1' => $node->biblio_custom1));
	        }
	        if ($productName == 'buy_export') {  //~ foreach($nids as $k => $nid){
	            $line_item = commerce_cart_product_add_by_id(2, 1, $combine = FALSE, $user->uid);
	            $text = t('המוצר "יצוא ביבליוגרפיה" למאמר "@biblio_custom1"  נוסף לעגלה..', array('@biblio_custom1' => $node->biblio_custom1));
	        }
	
	        $line_item->field_nid['und'][0]['value'] = $nid;
	        $line_item->field_laxo_name['und'][0]['value'] = $node->biblio_custom1;
	        commerce_line_item_save($line_item);
	        $cart =  commerce_cart_order_refresh($line_item->order_id);
			$lineItames = e_scholar_module_get_line_items();
			if(!empty($lineItames)){
				$dup = e_scholar_module_broken_line_items($lineItames); 
			}
	        $refreshedCart = commerce_cart_block_view('cart');
	        return array(
	            '#type' => 'ajax',
	            '#commands' => array(
	                //ajax_command_replace('.view-commerce-cart-block', $refreshedCart["content"]),
	                //ajax_command_replace('.cart-empty-block', $refreshedCart["content"]),
	                array('command' => 'ajax_buy_response', 'data' => array('nid' => $nid, 'msg' => $text, 'cart' => $refreshedCart["content"]))
	        ));
    	}
    } else {
    	return array(
            '#type' => 'ajax',
            '#commands' => array(      
                array('command' => 'ajax_buy_response_dup', 'data' => array('title' => $node->title))
        ));       
    }
}
function ajax_get_cart_block(){
	
 	$lineItames = e_scholar_module_get_line_items();
 	
    if(!empty($lineItames)){
		$dup = e_scholar_module_broken_line_items($lineItames ); 
    }
        $refreshedCart = commerce_cart_block_view('cart');
        echo $refreshedCart["content"] ;
//        return array(
//            '#type' => 'ajax',
//            '#commands' => array(
//                ajax_command_replace('.view-commerce-cart-block', $refreshedCart["content"]),
//                ajax_command_replace('.cart-empty-block', $refreshedCart["content"]),
//                array('command' => 'after_cart_refresh', 'data'=>'none'),
//        ));
        die();
}
function ajax_get_export() {
    global $user;
    $nid = explode(' ', trim(strip_tags($_GET["target"])));
    $style = trim(strip_tags($_GET["style"]));
    $flags = flag_get_user_flags('node', NULL, $user->uid);

    foreach ($flags["export"] as $k => $v) {
        $exports[] = $k;
    }
    foreach ($nid as $k => $v) {
        if (!in_array($v, $exports)) {
            unset($nid[$k]);
        }
    }
    if($style === "default"){
        $style = biblio_get_style();
    }
    rtf_help($nid, $style);

    die();

//~ $output = views_embed_view("laxo_biblio_data_output",$style,$nid);
    //TODO:  all other styles
    return array(
        '#type' => 'ajax',
        '#commands' => array(
            //~ ajax_command_replace('.view-commerce-cart-block', $refreshedCart["content"]),
            //~ ajax_command_replace('.cart-empty-block', $refreshedCart["content"]),
            //~ ajax_command_data('#block-commerce-cart-cart', 'foo', 'bar'),
            //~ ajax_command_settings(array("post" => $_POST), TRUE),
            //~ array('command' => 'aajax_custom_response', 'data' => $text)
            array('command' => 'ajax_get_export_output', 'data' => $output)
        )
    );
}

function ajax_get_checkout() {


    //~ $output = drupal_get_form('checkout_form');
    $output = drupal_get_form('checkout_form');
    //~ $output = views_embed_view("laxo_biblio_data_output","style_apa",1);
    //~ $output = commerce_checkout_router($order, $checkout_page = NULL);
//TODO:  all other styles
    return array(
        '#type' => 'ajax',
        '#commands' => array(
            //~ ajax_command_replace('.view-commerce-cart-block', $refreshedCart["content"]),
            //~ ajax_command_replace('.cart-empty-block', $refreshedCart["content"]),
            //~ ajax_command_data('#block-commerce-cart-cart', 'foo', 'bar'),
            //~ ajax_command_settings(array("post" => $_POST), TRUE),
            //~ array('command' => 'aajax_custom_response', 'data' => $text)
            array('command' => 'ajax_get_export_output', 'data' => $output)
        )
    );
}

function e_scholar_module_commerce_cart_block() {
    $output = views_embed_view("commerce_cart_block", "embed_1");
    return $output;
}

/*
  //~ function e_scholar_module_user_access(){
  //~ if(!user_is_anonymous()){
  //~ return false;
  //~ } else {
  //~ global $user;
  //~
  //~ $flag = flag_get_flag('export') or die('no "export" flag defined');
  //~ if ($flag->is_flagged(arg(1)) ){
  //~ return TRUE;
  //~ }
  //~ }
  //~ }
  function ajax_node_response($type = 'ajax', $nid = 0) {
  $output = e_scholar_module_load_noder($nid);
  $output = ajax_commerce_cart_block_response();
  if ($type == 'ajax') {
  $commands = array();
  $commands[] = ajax_command_replace('.view-commerce-cart-block,.cart-empty-block', $output);
  $page = array(
  '#type' => 'ajax',
  '#commands' => $commands
  );
  ajax_deliver($page);
  }
  else {
  $output = '<div id="content">' . $output . 'aaa</div>';
  //~ return $output;
  }
  }
 * 

  function ajax_cart_block_response($type = 'ajax', $nid = 0) {
  $output = _e_scholar_module_load_view($nid);
  if ($type == 'ajax') {
  $commands = array();
  $commands[] = ajax_command_replace('.view-commerce-cart-block', '<div class="view-commerce-cart-block">' . $output . '</div>');
  $page = array(
  '#type' => 'ajax',
  '#commands' => $commands
  );
  ajax_deliver($page);
  }
  else {
  $output = '<div id="content">' . $output . '</div>';
  return $output;
  }
  }
  //~ // helper function: return content by nid
  function e_scholar_module_load_noder($nid = 0) {
  $node = node_load($nid, NULL, false);
  if($node){
  $vnode = node_view($node);
  return theme("node", $vnode);
  }
  }
  function e_scholar_module_get_block_cart($name = 'commerce_cart',$display_id = 'Master') {

  $output = views_embed_view("commerce_cart_block");
  //~ $output = commerce_cart_block_view($block);
  //~ $block = array();



  //~ if (user_access('access content')) {
  //~ $block['subject'] = t('Recent content');
  //~ if ($nodes = node_get_recent(variable_get('node_recent_block_count', 10))) {
  //~ $block['content'] = array(
  //~ '#theme' => 'node_recent_block',
  //~ '#nodes' => $nodes,
  //~ );
  //~ }
  //~ else {
  //~ $block['content'] = t('No content available.');
  //~ }
  //~ }

  //~ print views_embed_view('forum_comments', 'block_1', $nid);
  return $output;
  }
  //~ ##########################/*      ajax loader - END */


function rtf_help($nids, $style) {

    $count = 0;
    $variables = array(
        'style_name' => $style,
    );
    $nodes = node_load_multiple($nids, array(), TRUE);
    foreach ($nodes as $node) {
        if (variable_get('biblio_hide_bibtex_braces', 0)) {
            $node->title = biblio_remove_brace($node->title);
        }
        $count++;
        $variables['node'] = $node;
        $variables['node']->title = utf8_to_rtf($variables['node']->title );
        $variables['node']->biblio_secondary_title = utf8_to_rtf($variables['node']->biblio_secondary_title  );
//        $variables['node']->biblio_type_name = utf8_to_rtf($variables['node']->biblio_type_name  );
        foreach($variables['node']->biblio_contributors as $key => $val){
//            $variables['node']->biblio_contributors[$key]["name"] = utf8_to_rtf($variables['node']->biblio_contributors[$key]["name"] );
            $variables['node']->biblio_contributors[$key]["lastname"] = utf8_to_rtf($variables['node']->biblio_contributors[$key]["lastname"] );
            $variables['node']->biblio_contributors[$key]["firstname"] = utf8_to_rtf($variables['node']->biblio_contributors[$key]["firstname"] );
            $variables['node']->biblio_contributors[$key]["initials"] = utf8_to_rtf($variables['node']->biblio_contributors[$key]["initials"] );
        }
//$variables['node']->biblio_sort_title = utf8_to_rtf($variables['node']->biblio_type_name  );
        
        if ($count == 1) {
            $rtf = new rtf();
            $rtf->setPaperSize(5);
            $rtf->setPaperOrientation(1);
            $rtf->setDefaultFontFace(1);
            $rtf->setDefaultFontSize(24);
            $rtf->setAuthor("Biblio 7.x");
            $rtf->setOperator("");
            $rtf->setTitle("Biblio RTF Export");
            $rtf->addColour("#000000");
        }
$text = filter_xss(theme('biblio_style', $variables) . '<br><br>', array('i', 'b', 'br', 'u', 'p', 'strong', 'em', 'sub', 'sup', 'ul', 'li'));
$text = preg_replace("/&nbsp;/i", "", $text);
$rtf->addText($text );
    }

    if ($count > 0)
        $rtf->getDocument();
}
function utf8_to_rtf($utf8_text) {
    $utf8_patterns = array(
      "[\xC2-\xDF][\x80-\xBF]",
      "[\xE0-\xEF][\x80-\xBF]{2}",
      "[\xF0-\xF4][\x80-\xBF]{3}",
    );
    $new_str = $utf8_text;
    foreach($utf8_patterns as $pattern) {
      $new_str = preg_replace("/($pattern)/e", 
        "'\u'.hexdec(bin2hex(mb_convert_encoding('$1', 'UTF-16', 'UTF-8'))).'?'", 
        $new_str);
    }
    return $new_str;
  }
function e_scholar_module_module_implements_alter(&$implementations, $hook) {
    //~ dpm($hook);
    // make this module form alter run last..( after biblio)
    if ( ($hook == 'css_alter' && isset($implementations['e_scholar_module'])) ||($hook == 'form_alter' && isset($implementations['e_scholar_module'])) || ($hook == 'menu_alter' && isset($implementations['e_scholar_module']))) {
        $group = $implementations['e_scholar_module'];
        unset($implementations['e_scholar_module']);
        $implementations['e_scholar_module'] = $group;
    }
}

//  biblio node edit form manipulation - START
function e_scholar_module_form_node_form_alter(&$form, &$form_state, $form_id) {
//    array_unshift($form['#submit'],  'e_scholar_module_biblio_node_form_validate');

    if( $form_id === "biblio_node_form"){
        $form['body']['und'][0]['#wysiwyg'] = FALSE;  // 0 
        $form["biblio_tabs"]["9"]["biblio_custom1"]['#wysiwyg'] = FALSE;  // 0 
        $form["biblio_tabs"]["1"]["biblio_abst_e"]['#wysiwyg'] = FALSE;  // 0 
        $form['#attached']['css'] = array(
            drupal_get_path("module", "e_scholar_module") . '/css/biblio_node_form.css'
        );
        $form['#attached']['js'] = array(
            drupal_get_path("module", "e_scholar_module") . '/js/biblio_node_form.js',
        );
        $container_2_haystack = array("title",  "biblio_custom1", "field-keywords");//,"field_libraries"
    //        "field_biblio_qualitive",  "field_biblio_quantitative", "field_biblio_research","field_commerce",
        $container_1_haystack = array("biblio_url","biblio_abst_e", "biblio_keywords", "biblio_secondary_title");

        if (isset($form_state["biblio_fields"]) && count($form["biblio_tabs"]) != 0) {
            $form["#attributes"]["class"][] = 'second_step';
            $form["top_content"] = array(
                '#type' => 'container',
                '#attributes' => array('class' => array("top_content")),
                '#weight' => -100,
            );
            $form["top_content"]["container_1"] = array(
                '#type' => 'fieldset',
    //            '#title' => t('container_1'),
                '#attributes' => array('class' => array('e_scholar_module_node_form_top')),
    //            '#collapsible' => TRUE,
    //            '#collapsed' => FALSE,
            );
            $form["top_content"]["container_2"] = array(
                '#type' => 'fieldset',
    //            '#title' => t('container_2'),
                '#attributes' => array('class' => array('e_scholar_module_node_form_top')),
    //            '#collapsible' => TRUE,
    //            '#collapsed' => FALSE,
            );
            foreach ($form as $form_key => $form_field) {
                if (gettype($form_field) === "array" && isset($form_field["#type"])) {
                    if ($form_field["#type"] === "vertical_tabs") {
                        foreach ($form_field as $key => $vertical_tab_fieldset) {
                        	if(isset($vertical_tab_fieldset["#type"])){
	                            if ($vertical_tab_fieldset["#type"] == "fieldset") {
	                                foreach ($vertical_tab_fieldset as $k => $field) {
	                                    if (gettype($field) === "array" && in_array($k, $container_1_haystack)) {
	                                        $form["top_content"]["container_1"][$k] = $field;
	                                        unset($form[$form_key][$key][$k]);
	                                    }
	                                    if (gettype($field) === "array" && in_array($k, $container_2_haystack)) {
	                                        $form["top_content"]["container_2"][$k] = $field;
	                                        unset($form[$form_key][$key][$k]);
	                                    }
	                                }
	                            }
                        	}
                        }
                    }
                    if ($form_field["#type"] == "textfield") {
                        if (in_array($form_key, $container_2_haystack)) {
                            $form["top_content"]["container_2"][$form_key] = $form_field;
                        } elseif (in_array($form_key, $container_1_haystack)) {
                            $form["top_content"]["container_1"][$form_key] = $form_field;
                        } else {
                            continue;
                        }
                        unset($form[$form_key]);
                    }

                    if (isset($form_field["und"])) {
                        if (in_array($form_field["und"]["#field_name"], $container_1_haystack)) {
    //                        $form_field["und"]["#title"] .= '@'.$form_field["#weight"];
    //                        $form["top_content"]["container_1"][$form_field["und"]["#field_name"]] = $form_field;
                            unset($form[$form_key]);
                        }
                        if (in_array($form_field["und"]["#field_name"], $container_2_haystack)) {
                            $form["top_content"]["container_2"][] = $form_field;
                            unset($form[$form_key]);
                        }
                    }
                }
            }
            $form["top_content"]["container_1"]["#weight"] = -20;
            $form["top_content"]["container_2"]["#weight"] = -19;

            $form["top_content"]["container_1"]["biblio_keywords"]["#size"] = 40;
            $form["top_content"]["container_2"]["biblio_custom1"]["#rows"] = 1;
    //    $form["top_content"]["container_2"]["biblio_custom1"]["#type"] ="textfield";
    //    $form["top_content"]["container_2"]["biblio_custom1"]["#weight"] = -19;
            $form["top_content"]["container_2"]["title"]["#size"] = 60;
            $form["top_content"]["container_2"]["title"]["#weight"] = -17;

            $form["top_content"]["container_1"]["biblio_url"]["#weight"] = -18;
            $form["top_content"]["container_1"]["biblio_url"]["#field_suffix"] = '<a href="#"id="url_action" class="description" >open link in a new tab</a>  /  <a href="#" id="url_action_pop" class="description" >  open link in a popup</a>';

            $form["top_content"]["container_2"][2]["#weight"] = 25; // taxonomy field

            $form["top_content"]["container_2"]["biblio_type"] = $form["biblio_type"];
            $form["top_content"]["container_2"]["biblio_type"]["#weight"] = 99;

            $form["top_content"]["container_1"]["field_library"]["#weight"] = 100;

            unset($form["biblio_type"], $form["biblio_tabs"][1] //biblio_abstrct empty tab
            );
        }
    }
}
//function e_scholar_module_unique_node_autocomplete_callback($string = "") {
//    $matches = array();
//    if ($string) {
//        $result = db_select('node')
//                ->fields('node', array('nid', 'title'))
//                ->condition('title', db_like($string) . '%', 'LIKE')
//                ->range(0, 10)
//                ->execute();
//        foreach ($result as $node) {
//            $matches[$node->title . " [$node->nid]"] = check_plain($node->title);
//        }
//    }
//
//    drupal_json_output($matches);
//}
//~ function e_scholar_module_flag_flag($flag, $content_id, $account, $flagging){
//~ // Do something in response to the flagging.
//~ }
//*/
//~ function e_scholar_module_preprocess_views_view_table(&$view){
//~ if( isset($view)){	
//~ }
//~ }
//~ }
//~ function e_scholar_module_pane_review($form, $form_state, $checkout_pane, $order) {
//~ }
//~ function e_scholar_module_overlay_child_initialize() {
//~ drupal_add_js(drupal_get_path('module', 'e_scholar_module') . '/js/overlay.js');
//~ }
//~ 
function e_scholar_module_form_alter(&$form, &$form_state){
    
    if($form["form_id"]["#value"] === "views_form_commerce_cart_block_default"){
        if(preg_match('/search/i', $_SERVER["HTTP_REFERER"])){
             $form["#action"] = $_SERVER["HTTP_REFERER"];
        }
       
        
    }
    if($form["form_id"]["#value"] === "tipsy_admin"){
        drupal_add_css('body {direction: ltr;}', array( 'type' => 'inline' ));
    }
    if($form["form_id"]["#value"] === "commerce_checkout_form_checkout"){
        $form["extra_pane__node__446"]["#weight"] = 100;
    }
}
// ##############3   Ajax cart ##############
function e_scholar_module_form_views_form_commerce_cart_form_default_alter(&$form, $form_state, $form_id){
  $form_state["cache"] = false;
  $form_state['no_cache'] = TRUE;
}
/**
 * Implements hook_form_FORM_ID_alter().
 * Alter to cart form to add #ajax properties.
 */
function e_scholar_module_form_views_form_alter(&$form, $form_state, $form_id) {
	$form_state['no_cache'] = TRUE;
	$form_state["cache"] = false;
  $alter = $form_id === 'views_form_commerce_cart_block_default';
  $alter = $alter || ($form_id === 'views_form_commerce_cart_form_default');
  if ($alter) {
    _e_scholar_module_form_views_form_alter($form, $form_state, $form_id);
  }
}

function _e_scholar_module_form_views_form_alter(&$form, $form_state, $form_id) {
  $view = &$form_state['build_info']['args'][0];
  $form_state["cache"] = false;
  $form_state['no_cache'] = TRUE;
  
  if ($view->use_ajax) {
//     $fake_link = 'dc-cart-ajax-' . str_replace('_', '-', $form_id);
//     $fake_link = '<a href="#" id="'. $fake_link .'">&nbsp;</a>';
    $form['#prefix']  = $form['#prefix'] . '<div id="dc-cart-ajax-form-wrapper">';
    $form['#suffix']  = '</div>' . $form['#suffix'];
//     $form['#suffix'] .= '<div class="attachment"><div class="views-summary">'. $fake_link .'</div></div>';
    

    $ajax = array(
      'callback' => 'e_scholar_module_form_views_form_commerce_cart_form_ajax_submit',
      'wrapper' => 'dc-cart-ajax-form-wrapper',
      'method' => 'replace',
      'progress' => array('type' => 'throbber', 'message' => ''),
    
    );

    $form['actions']['submit']['#ajax'] = $ajax;
    if (!empty($form['edit_delete'])) {
      foreach (element_children($form['edit_delete']) as $k) {
        $form['edit_delete'][$k]['#ajax'] = $ajax;
      }
    }
  }
}
/**
 * Ajax callback for cart form.
 */
function e_scholar_module_form_views_form_commerce_cart_form_ajax_submit(&$form, &$form_state) {
	$form_state["cache"] = false;
	$order = commerce_cart_order_load($GLOBALS['user']->uid);
	$is_empty = empty($order->commerce_line_items);
	e_scholar_module_broken_line_items(e_scholar_module_get_line_items());
  //$output = '';
  if ($is_empty) {
     $output = menu_execute_active_handler('cart', FALSE);
	} else {
		
	       	$view = views_get_view("commerce_cart_block", TRUE);
	       	$view->set_use_ajax(TRUE);
	       	$output = $view->preview("embed_1", array($order->order_number));
		
  }

  $commands   = array();
  $commands[] = array(
    'command' => 'dc_cart_ajax',
    'output'  => $output ,
    'message' => theme('status_messages'),
    'form-id' => str_replace('_', '-', $form['#form_id']),
  );
  
//   $commands[] = array(
//   		'command' => 'after_lineitem_delete'
//   );
  return array('#type' => 'ajax', '#commands' => $commands);
}
function e_scholar_module_ajax_render_alter(&$commands){
	if( isset($_REQUEST["form_id"]) ){ 
		if($_REQUEST["form_id"] == "views_form_commerce_cart_form_default"){
			/*$order = commerce_cart_order_load($GLOBALS['user']->uid);
			$view = views_get_view("commerce_cart_block", TRUE);
	       	$view->set_use_ajax(TRUE);
	       	$output = $view->preview("embed_1", array($order->order_number));*/
	       	$commands[] = array(
			    'command' => 'views_form_commerce_cart_reload',		    
			);
			
		}
		if($_REQUEST["form_id"] == "views_form_commerce_cart_block_embed_1"){
		  	$commands[] = array(
			    'command' => 'after_lineitem_delete',
		  		//'element' => ''	    
			);
		}
	}
}
